let ServerPacket = invoke('ServerPacket');

exports.initLS = (serverProtocol) => {
    let packet = new ServerPacket(0x00);

    packet
        .writeD(0x03ed779c)      // Session ID
        .writeD(serverProtocol); // Protocol

    packet
        .writeD(0x03ed779c)      // Session ID
        .writeD(serverProtocol)  // Protocol
        .writeB(-1)              // RSA Public Key
        .writeD(0x29dd954e)      // ?
        .writeD(0x77c39cfc)      // ?
        .writeD(0x97adb620)      // ?
        .writeD(0x07bde0f7)      // ?
        .writeB(-1)              // BlowFish key
        .writeC(0x00);           // Termination

    return packet.fetchBuffer();
};

// Chronicle 0/1/2
// [0x5b,0x3b,0x27,0x2e,0x5d,0x39,0x34,0x2d,0x33,0x31,0x3d,0x3d,0x2d,0x25,0x26,0x40,0x21,0x5e,0x2b,0x5d]
// [;'.]94-31==-%&@!^+]\000

// Chronicle 4/5
// [0x5f,0x3b,0x35,0x2e,0x5d,0x39,0x34,0x2d,0x33,0x31,0x3d,0x3d,0x2d,0x25,0x78,0x54,0x21,0x5e,0x5b,0x24]
// _;5.]94-31==-%xT!^[$\000

// Chronicle 6 (Interlude)
// [0x6b,0x60,0xcb,0x5b,0x82,0xce,0x90,0xb1,0xcc,0x2b,0x6c,0x55,0x6c,0x6c,0x6c,0x6c,0x6b,0x60,0xcb,0x5b]
// k`Ë[‚Î±Ì+lUllllk`Ë[‚\000
// k`Ë[‚Î±Ì+lUllll  F 8\000
